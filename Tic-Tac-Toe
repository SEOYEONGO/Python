X = "X"

 

O = "O"

 

EMPTY = " "

 

TIE = "TIE"

 

def display_instruct():     #구조를 보여주는 함수

    print(

 

    """

    Welcome to Tic-Tac-Toe.

 

    0 | 1 | 2

    ---------

    3 | 4 | 5

    ---------

    6 | 7 | 8

 

    """

    )

    

def ask_yes_no(question):           #질문에 대한 응답을 받는 함수

    response = None

    while response not in ("y", "n"):

        response = input(question).lower()

    return response

 

def ask_number(question, low, high):        #질문에 대한 응답을 받는 함수 2

    response = None

    while response not in range(low, high):

        response = int(input(question))

    return response

 

def pieces():           #누가 먼저 할 건지 결정하는 함수

    go_first = ask_yes_no("Do you require the first move? (y/n): ")

    if go_first == "y":

        print("\nYou will go first.")

        human = X

        computer = O

    else:

         print("\nI will go first.")

         computer = X

         human = O

    return computer, human

 

def new_board():        #3X3 공백 보드를 만드는 함수

    board = []

    for square in range(9):

        board.append(EMPTY)

    return board

 

def display_board(board):       #보드를 보여주는 함수

    print("\n\t", board[0], "|", board[1], "|", board[2])

    print("\t", "---------")

    print("\t", board[3], "|", board[4], "|", board[5])

    print("\t", "---------")

    print("\t", board[6], "|", board[7], "|", board[8], "\n")

 

def legal_moves(board):     #공백이 있는 인덱싱을 모아놓는 리스트를 만드는 함수

    moves = []

    for square in range(9):

        if board[square] == EMPTY:

            moves.append(square)

    return moves

 

def winner(board):          #승자를 가리는 함수

    WAYS_TO_WIN = ((0, 1, 2),

    (3, 4, 5),

    (6, 7, 8),

    (0, 3, 6),

    (1, 4, 7),

    (2, 5, 8),

    (0, 4, 8),

    (2, 4, 6))

    for row in WAYS_TO_WIN:

        if board[row[0]] == board[row[1]] == board[row[2]] != EMPTY:

            winner = board[row[0]]

            return winner

    if EMPTY not in board:

        return TIE

        return None

    

def human_move(board, human):  #사용자의 위치를 받는 함수

    legal = legal_moves(board)

    move = None

    while move not in legal:

        move = ask_number("Where will you move? (0 - 8):", 0, 9)

        if move not in legal:

            print("\nThat square is already occupied, foolish human. Choose another.\n")

    return move

 

def computer_move(board, computer, human): #컴퓨터의 위치를 결정하는 함수

    board = board[:]

    

    # the best positions to have, in order

    BEST_MOVES = (0, 7, 6, 3, 8, 1, 4, 5, 2)

    

    print("I shall take square number", end=" ")

    

    # if computer can win, take that move

    for move in legal_moves(board):

        board[move] = computer

        if winner(board) == computer:

            print(move)

            return move

    board[move] = EMPTY

 

    # if human can win, block that move

    for move in legal_moves(board):

        board[move] = human

        if winner(board) == human:

            print(move)

            return move

    board[move] = EMPTY

    

    # since no one can win on next move, pick best open square

    for move in BEST_MOVES:

        if move in legal_moves(board):

            print(move)

        return move

 

def next_turn(turn):  #차례를 바꿔주는 함수

    if turn == X:

        return O

    else:

        return X

 

def congrat_winner(the_winner, computer, human):  #승자를 축하하는 함수

    if the_winner != TIE:

        print(the_winner, "won!\n")

    else:

        print("It's a tie!\n")

 

 

def main():         #메인함수

 

    display_instruct()

    computer, human = pieces()

    turn = X

    board = new_board()

    display_board(board)       

    while not winner(board):

        if turn == human:

            move = human_move(board, human)

            board[move] = human

        else:

            move = computer_move(board, computer, human)

            board[move] = computer

        display_board(board)

        turn = next_turn(turn)

    the_winner = winner(board)

    congrat_winner(the_winner, computer, human)

 

# start the program

 

main()

input("\n\nPress the enter key to quit.")
